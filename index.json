[{"content":"Compute Layer www.awsacademy.com\nFour compute model categories:\nVirtual Machines (VMs):\nEC2: elastic and sizeable virtual servers in cloud Lightsail: Virtual Private Server to run simple workloads Containers\nElastic Container Service (ECS): runs Docker container applications on AWS PaaS\nElastic Beanstalk: Runs web applications and services that are developed in Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker. Serverless\nAWS Lambda: Serverless compute solution that runs Java, Go, PowerShell, Node.js, C#, Python, or Ruby. AWS Fargate: serverless compute platform for containers. For the specialized solutions:\nAWS Outposts: runs AWS infrastructure and services on-premise AWS Batch: runs batch jobs (running high-volume repetitive data jobs with minimal user interaction) at any scale Introduction to EC2 Elastic Compute Cloud:\nEasily increase or decrease the number of servers through automation. Run application that require compute resources, such as CPU and RAM Pay only for the capacity that you use EC2 instances are located in AWS Availability Zones. Each virtual machine runs an OS, such as Windows or Amazon Linux.\nThese virtual machine runs on top of a hypervisor. Hypervisor provides EC2 instance with access to hardware resources, for instance processors, memory, and storage.\nStorage:\nInstance store (ephemeral storage): physically attached to the host and provides temporary block-level storage to an instance. The data stored not persistent through instance stops, terminations, or hardware failures. These information stored in instance store: buffers, caches, and scratches data. Amazon Elastic Block Storage (EBS) is persistent block storage volumes (the data will be persisted). This block storage is available for encryption. Many EC2 instances use AmazonEBS for the boot disk and other storage needs. There are EBS optimized instances that provide faster access to an attached EBS volume. Use Amazon EC2 when you need:\nComplete control up to computing resources, even you can choose x76 or ARM architecture. Optimizing compute costs (on-demand, reserved, and spot + saving plans). Ability to run any type of workload. Provisioning an EC2 instance Provision EC2 based on these parameters:\nAmazon Machine Image (AMI) - base software configuration. Instance type- combination of CPU, memory, storage, and networking capacity Network placement and addressing - network placement and security control Assumed role (optional) - attach AWS Identity and Access Management (IAM), granting permission for accessing AWS services to applications that run on the instance or users that are connected to the instance. User data - initialize or customize instance configuration by specifying a user data script that automatically runs when the instance is launched. Storage - type of storage to store the root or boot volume. Security group - which ports network traffic is allowed on. Key pair - is used to remotely access the instances, such as RDP or SSH. Amazon Machine Image (AMI) Includes information that is needed to launch an instance, including:\nTemplate for the root volume (guest OS and other installed software) Launch permission - which AWS accounts can access the AMI Block device mapping - specifies any storage volumes to attach to the instance Benefits of using AMI:\nRepeatability - contains full configuration and content of an EC2 instance. It can repeatedly launch multiple instances with efficiency and precision. Reusability - instances that are launched from the same AMI are exact replicas of each other. Recoverability - if instance fails, you can replace it by launching a new instance from the same AMI. Consideration when using AMI:\nRegion - AMI exists only in a specific region. However you can copy AMI from one to another region as needed. Operating System Storage for the root device - All AMIs are categorized as either Amazon EBS-backed or instance store-backed. Architecture - 32 bit, 64 bit, ARM, etc Virtualization type - how they boot or can they take advantage of special hardware extension. Paravirtual (PV) - run on host that does not have explicit support for virtualization. Hardware Virtual Machine (HVM) - Fully virtualized of hardware and boot, it provides ability to run an OS directly on top of a virtual machine without any modification. Use this for performance. Sources of AMI:\nQuick starts - AMIs that are built by AWS Windows Linux: Amazon, Ubuntu, RHEL, SUSE, Fedora, Debian, CentOS, Gentoo, Oracle, and FreeBSD It also enables you to create your own AMI from an EC2 instance Marketplace: by vendors with specific use cases Community built: not evaluated by AWS, use at your own risk. EBS vs Instance backed: Creating a new AMI:\nChoose source AMI, can be provided by AWS or build from virtual machine that you import. Then launch an EC2 instance from this AMI. When you launch that instance, you will get an unmodified instance. Optionally you can create a golden instance, a virtual machine that you configure with the specific OS and application settings that you want. Then capture it as a new AMI. For an EBS-backed AMI, capture the new AMI by using Amazon EC2 AMI tools to create a bundle for the instance root volume, and upload the bundle to an S3 bucket. Then you must manually register the new AMI. The AMI can be used to launch new instances within the same AWS Region. The new AMI can act as a new starter AMI. Optionally you can copy the new AMI, so it is enabled to other regions. Amazon EC2 instance lifecycle EC2 Image Builder Automates creation, management, and deployment of golden VM images. It provides\nGraphical interface to create image-building pipelines Amazon EC2 AMIs and on-premises VM images Secure, validated, and up-to-dated images Enforces version control Steps of Image Builder\nIdentify source image to build a new image Select build components software for installation or customization. Select hardening tests that should be run each time the image pipeline runs. This steps reduces risk of incompatibility. Specify a build schedule to identify how often this pipeline should run, and when. Define whether you want the image to be distributed to selected Regions. Selecting an EC2 Instance Type m5d.xlarge\nm = family 5 = generation .xlarge = size You can add additional capabilites:\nHDD or SSD for the root EBS. Instance types General purpose: M5, T3, A1\nWeb or application servers Gaming servers Analytics applications Test environments Compute optimized: C5, C5n\nBatch processing Distributed analytics Ad server engines Multiplayer gaming Video encoding High performance computing (HPC) Memory optimized: R5, X1, HMI\nIn-memory caches High-performance databases Big data analysis Accelerated computing: P3, G4, F1\nMachine learning \u0026amp; artificial intelligence HPC Graphics Storage optimize: I3 (high I/O), D2 \u0026amp; H1 (dense storage)\nHigh-performance databases Real-time analytics Transactional workloads NoSQL databases Big data Data warehouse Log processing How to choose instance type Meeting your needs Performance Cost AWS Compute Optimizer (https://aws.amazon.com/compute-optimizer/) Generally, select the latest generation type as it will have better price-to-performance ratio. AWS Compute Optimizer Analyzes the configuration and utilization metrics of EC2 instances and Auto Scaling groups. It reduces cost and improve performance of workloads. It generates EC2 instance type and size recommendations for M, C, R, T, and X instance families.\nFindings classification:\nUnder-provisioned Over-provisioned Optimized None if you have activated compute optimizer for less than 12 hours. if instance that has been running for less than 30 hours. If the instance type is not supported by Compute Optimizer User Data Script Script to initialize EC2 on instance creation.\nUpdate Installing software Windows use EC2Launch tools to launch userdata written in PowerShell\nInstance metadata (can be retreived from a user data script)\nhttp://169.254.169.254/latest/meta-data/public-hostname How much preconfigured AMI?\nFully baked AMI: Includes everything, fully functional - longer to build JeOS (Just Enough OS AMI) - Minimal OS configuration - longer to boot, because user data needs to run on boot time. Hybrid AMI - customizable tradeoffs If you too much preconfigured AMI, you may have security vulnerability on your components, such as outdated softwares.\nEC2 Storage EC2 instances will always have a root volume and optionally have one or more data volumes.\nInstance store (can be root volume) EBS (can be root volume) Elastic File System (EFS) EFx for Windows File Server Instance store (temporary storage), example use cases\nBuffers Cache Scratch data EBS (network-attached persistent storage)\nCan attach in the same AZ Can be encrypted Supports snapshots and stored to S3 Data persists independently from the life of the instance EBS SSD-backed (if you want to focus on IOPS)\nLarge database workloads Transactional workloads EBS HDD-backed (focus on throughput)\nst1 (throughput optimized HDD) low-cost \u0026amp; designed for frequently accessed, throughput-intensive workloads Example: big data, data warehouses, log processing It cannot be a boot volume sc1 (cold hdd) lowest cost HDD volume for infrequent access if the lowest storage cost is important It cannot be a boot volume EBS-optimized\ndedicated network connection to attached EBS to omprove I/O Manually configured when creating instanced To share storage to multiple instances, S3 is an object store, not a block store (allows individual changes to block)\nAmazon EFS For Linux Supports Network File Systems (NFS) protocols Compatible to AMIs that compatible to NFS For: Home directories, file system, app dev testing, big data and analysis Amazon FSx Fully native to Windows Compatibility: NTFS, SMB, DFS, Microsoft Active Directory and supports windows Access Control Lists For: Home directories, Lift and shift, media and entertainment, data analytics, software environment. Pricing Option Five ways\nOn demand: most flexibility no long term commitment. Reserved instances: 1 year or 3 year cmmitment to receive significant discount, for steady compute needs. Saving plans: same discounts as Reserved Instances with more flexibility in exchange for a $/hour commitment. For All Amazon EC2, AWS Fargate, AWS Lambda. Spot instances: Spare EC2 with lowest price, however Amazon can interrupt usage of spot instance and notify you 2 minutes before. The spot instance cost depends on the region and capacity. Dedicated host: physical server with Amazon EC2 instance capacity fully dedicated for your use. For workloads that require the use of your own software license or single tenancy to meet compliance requirements. Dedicated host pricing\nOn demand Saving plans Reserved instance Know you workload by creating baseline, use reserved instance or saving plans for these baseline Use On-demand pricing for spiky workloads Scale using spot instance if you need stateless and small usage EC2 ","date":"2022/10/08","image":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/cloud-4/cloud.jpg","permalink":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/cloud-4/","summary":"Compute Layer www.awsacademy.com\nFour compute model categories:\nVirtual Machines (VMs):\nEC2: elastic and sizeable virtual servers in cloud Lightsail: Virtual Private Server to run simple workloads Containers\nElastic Container Service (ECS): runs Docker container applications on AWS PaaS\nElastic Beanstalk: Runs web applications and services that are developed in Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker. Serverless\nAWS Lambda: Serverless compute solution that runs Java, Go, PowerShell, Node.js, C#, Python, or Ruby.","title":"Cloud 4 - Compute Layer"},{"content":"Penetration Testing Assessing the organization\u0026rsquo;s IoT requires testing hardware and software. Penetration testing should be done regularly throughout the lifecycle. Many regulations also require third-party penetration tests as it is a good security practice.\nFurthermore, blue teams should ealuate the security posture while read teams are conducting their exercies.\nRed and Blue Teams Penetration testing, with the goal of find and report vulnerabilities, should be limited to most important aspects of an implementation. You should consider what is of most business value to the organization (data privacy, business continuity, etc) and conduct the security test accordingly.\nPenetration testing can be conducted as either whitebox or blackbox.\nWhitebox: provides more thorough evaluation with the parcitipation of the whole team to find weaknesses. Blackbox: a test to mimic outside attackers. These items should be tested on the penetration test campaign:\nIs there is any default password in the production? Is there any default cryptographic keys used in the production? Is there any default configurations used in the production? (such as default port) Is there any insecure pairing process that being implemented? Is there any firmware update processes on devices and within the infrastructure? Is there any unencrypted data streams from IoT to their gateways? Is there any non-secure RF (Bluetooth, ZigBee, ZWave, etc) configurations? Hardware Security Evaluation Testers need to understand whether hardware devices introduce new weaknesses in a system. A typical hardware pentesting would go as follow:\nIdentify whether the device is in a protected or unprotected location. Can it be stolen or swapped out? Is there any online reporting mechanism to notify administrator when it is stolen? Evaluate tamper protections and break open the device. Attempt to dump memory and try to steal sensitive information. Attempt to download the firmware for analysis. Attempt to upload new firmware and make firmware operational. Airwave Security Evaluation Wireless communication that widely implemented by IoT devices are a potential back doors into an enterprise. It is important to take time during penetration tests to determine if it is possible to leave rouge RF devices behind that may able to monitor or exfiltrate data covertly.\nIoT Penetration Test Tools There is a list of tools that may be useful during IoT penetration testing.\nBlueMaho: Bluetooth security tools. Bluelog: Identify discoverable BT devices. Crackle: Cracking BLE encryption. SecBee: ZigBee vulnerability scanner. KillerBee: Evaluating security posture of ZigBee networks. Scapy-radio: Wifi pentesting tool that support for testing Bluetooth-LE, 802.15.4-based protocols, and ZWave. Wireshark: Sniffing tool. Aircrack-ng: Wireless security tool for exploiting WiFi networks. Chibi: An MCU that integrate with open-sourced ZigBee stack. Hardsploit: Framework to test IoT exploitability. HackRF: Flexible and turnkey platform for RX and TX 1 MHz to 6 MHz. Shikra: A device that allows the tester to interface to different data interfaces, such as JTAG, SPI, I2C, UART, and GPIO. The teams should keep track of the latest vulnerabilites in IoT example. The useful location is National Vulnerability Database, https://nvd.nist.gov. In some cases, vulnerabilites may not be directly in the IoT devices, but in the software and systems to which they connect.\nCompliance Monitoring For example Center for Internet Security (CIS) released an addendum to the 20 critical controls that details coverage of each control within the IoT. This document provides a starting point for the security of the IoT system.\nAsset and Configuration Management Implementing analytic tools to determine when asset requires maintenance and detect in real time when an asset has gone offline. Imaging a device, such as robot while on manufacturing floor, enables us to predict failure.\nConsider a drone as an IoT endpoint, you can document these items to perform failure prediction.\nRegistration number Tail number Sensor payloads Manufacturer Firmware versions Maintenance logs Flight performance characteristics. Ideally these items self-monitored by some sensors to determine drone\u0026rsquo;s condition, such as\nTemperature Strain Torque To properly perform routine maintenance, there are two confugurations that you should consider:\nIoT asset components (i.e. firmware) are fully integrated and updated by the IoT device vendor in a single update. Always ensure the new firmware is digitally signed to maintain its authenticity and integrity. IoT asset is developed modularly with many different technologies that must each be maintained and separately updated. Keeping track of assets and their states is essential to maintaining a healthy security posture. If possible keep track of these devices through an automated inventory management (for example using SIEM).\nIncident Management Impact of compromises or failures in IoT system include financial loss, reputational damage, and even personnel safety. Incident responders should familiar with business continuity plans to determine the appropriate remidiation steps.\nMicrogrids provide a valuable example for incident management. It provides self-contained energy generation, distribution, and management system that may or may not be connected to a larger power distribution infrastructure. Identifying an incident involving one of PLCs may require that the responders first understand the impact of taking PLC offline. They must work very closely with the impacted business operations during the response.\nWell-documented assets and system descriptions bring a big help to incident management.\nForensics Keeping as much data s possible from each IoT endpoint can aid in investigation. However, in IoT system the assets themselves may not be available (such as stolen), may not be capable of storing useful data, or may have been tampered with. Gaining data that was generated by compromised IoT devices gives a good starting point to the investigation.\nDisposal The disposal phase can apply to the system as a whole or to and individual component. Proper disposal procedures can prevent adversaries to gain physical access to IoT devices (such as dumpster diving for old electronics).\nZeroisation If IoT devices are configured with cryptographic material that allows them to join local networks or communicate with other remote devices, then that materal should be properly wiped prior to their disposal. Ensure there are policies and procedures to remove these keys.\nData Purging Gateway devices should also be inspected thoroughly when being decommissioned from a system. These devices may have latent data stored on them.\nData Archive Management The amount of time that data must be kept depends on specific requirements and regulations. To satisfy such regulations may require data warehousing capability, such as Amazon S3, etc.\nQuestions Q: If there is a detected attack on an IoT endpoint, how should security team do the incident management? A: Firstly, before any incident, documents the asset and the configuration. And then gain the data generated by the incidents.\nQ: There are two type of penetration testing. Please describe those. A: Whitebox: provides more thorough evaluation with the parcitipation of the whole team to find weaknesses. Blackbox: a test to mimic outside attackers.\n","date":"2022/09/19","image":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/iot-security-4/IoTSec.jpg","permalink":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/iot-security-4/","summary":"Penetration Testing Assessing the organization\u0026rsquo;s IoT requires testing hardware and software. Penetration testing should be done regularly throughout the lifecycle. Many regulations also require third-party penetration tests as it is a good security practice.\nFurthermore, blue teams should ealuate the security posture while read teams are conducting their exercies.\nRed and Blue Teams Penetration testing, with the goal of find and report vulnerabilities, should be limited to most important aspects of an implementation.","title":"IoT Security 4 - The IoT Security Lifecycle"},{"content":"Pillar of Information Security Five pillars of cybersecurtiy:\nConfidentiality Integrity Availability Authentication Non-repudiation Plus two more in IoT\nResilience: maintain state of awareness and an accepted level of operational normalcy in response to disturbances including from the nature. Safety: safe from causing hurt, injury, or loss. TVR (Threat Vulnerability Risk) Threat: potential of attacks/exploit. Threat actor (source): who do the threat. Threat: hardware, software, environmental, supply chain, degradation, etc. Can target safety: transfer functions, state filters (kalman filters) and other inner control loop artifacts. Malicious hacking drives for-profit marketplace of its own in dark web. Vulnerability: weakness either in design, integration, or operation. Deficiencies in a device\u0026rsquo;s physical protection Software quality Configuration Suitability of protocol security for its environment Appropriateness of the protocols themselves. Risks: quantitative or qualitative methods of evaluation. It one\u0026rsquo;s exposure to loss. How large the impact of attack? How valuable the target may be to attackers? Anticipated skill and motivations of the attackers. A prior knowledge of a system\u0026rsquo;s vulnerabilities (those discovered during threat modelling, public advisories, penetration testing, and so on). Common IoT Attack\nWired and wireless scanning Protocol attacks Eavesdropping Cryptographic and key management attacks Spoofing and masquerading Operating system and application integrity attacks Denial of service and jamming Physical security attacks Access control attacks (Privilege Escalation) Countermeasures:\nAttack Trees Using SecuriTree tools build by Amenaza. It assists you in modelling each attack goal by establishing indicators such as the following:\nCapabilities of the attacker: includes technical ability, noticeability, cost of the attack Behaviours and probabilities Impact of the attack Benefits to the attacker: related to the attacker\u0026rsquo;s motivation abcd Detriments to the attacker: related to the attacker demotivators The example of attack trees: Legends:\nAND Operator, it means the child node must be achieved to complete the objective. OR Operator, it means at least one child node must be achieved to complete the objective. Representing the leaf node (no subtree under the element). It represents the actual attack vector (entry points) into the model. Attacker has goal to re-directing Unmanned Aircraft Systems (UAS), which is positio of a drone while in flight. There are top-level activities of attack tree.\nRedirect UAS represents the end objective of the attacker (using OR Operator). This can be achieved by these methods: Corrupting its navigation database that maps named locations to positions in space (latitude, longitude, and altitude). Spoofing GPS: attacker could choose actif RF-based GPS attack to generate false GPS timing, so the drone interprets a false location. Spoofing GCS (Ground Control Station): attacker spoof drone\u0026rsquo;s operator and attempt to send malicious routing command. Under the Corrupt Navigation Database (uses AND operator). Exploit transitive trust: attacker compromise other server which is trusted by the navigation database to accomplish attack on the navigation database itself. Compromise of the navigation database server: attacker successfully gain the database server. Modify GIS (Geographic Information System) tables: attacker tamper the navigation database. Attack trees can generate interesting reports, such as a graph of willingness-to-capability ratios. The graph can help you to prioritize the security controls.\nFault Trees Safety and reliability engineering\u0026rsquo;s principal modeling tool is called Fault Tree Analysis (FTA). For example, FAA safety requirements for aircraft needs significant levels of redundancy. This risk management of FAA for example lean heavily on FTA. For example it can account for the rate at which an aircraft\u0026rsquo;s braking system may fail naturally.\nFault tree and attack tree differences:\nFault tree are not based on intelligently planned attacks. Fault trees are traversed based on stocahstic process (failure/fault rates) from each leaf through the dependent, intermediate nodes. Each fault tree leaf is completely independent (fault occur randomly AND independently of each other) of all other leaves of the tree. Recommendation for High Safety and Security Assurances Integrate FTA into safety-critical IoT device and system engineering methodologies. Ensure that the actual IoT use cases are represented in FTA. Ensure the security engineers have a seat at the table. As security engineers identify security controls, determine if the controls impact the fault-tolerance design. To prevent safety-security threats, you have to carefully design Safety mitigations that don\u0026rsquo;t undermine needed security controls. Security mitigations that don\u0026rsquo;t diminish safety controls. Sometimes, compromises have to made that result in residual, accepted on both safety and security. Example Anatomy of a Deadly Attack This example highlights the convergence of engineering disciplines at play in the planning, execution, and defense.\nPrerequisistes: Attacker possesses significant aircraft avionics system knowledge. Attacker develops a customized exploit for aircraft control system. The attacker compromises an airline\u0026rsquo;s ground maintenance network and successfully compromise airliner\u0026rsquo;s Integrated Modular Avionics (IMA) system. The attacker physically or logically tamper the aircraft\u0026rsquo;s legitimate software/firmware binary with the chosen exploit. The software update is uploades, the malicious code begins to run and reprogram the controller. The malicious microcontroller binary overwrites the notch filter mechanism, eliminating the system\u0026rsquo;s pitch mode dampening of the aircraft\u0026rsquo;s natural and harmonic structural frequencies. If aircraft begin its flight and hits mild turbulence after takeoff, notch filter failed to function properly and causes the wing to disintegrate. Recommended mitigation:\nAvionics binaries were cryptographically signed by the manufacturer, so integrity can be protected end-to-end. Do not rely on Cyclic Redundancy Check (CRC), attacker can easily find ways of thwarting it. CRC were designed to detect accidental fault, not intelligently designed attack. Car Exploitation Remote Car Exploitation: http://illmatics.com/Remote%20Car%20Hacking.pdf. Automotive vehicles implement Controller Area Network (CAN) which allows individual components, known as Electronic Control Units (ECUs), to communicate. These ECUs include safety-critical components, such as braking system, power steering, etc. If there is no security validation of the message, attacker can communicate directly with ECU.'\nTypical Attack of IoT Wireless reconnaissance and mapping Security protocol attacks Phyiscal security attacks Application security attacks Threat Modelling an IoT System Based from the book by Adam Shostack, Threat Modelling: Designing for Security. Identify assets: understanding of what must be protected Create a system/architecture overview: what the functionality of the IoT system and how the attacker could misuse the system. Decompose the system: understanding the data lifecycle as it flows through the system. This allows us to identify weak points. Identify threats: who and how the attacker can compromise the system? The populare STRIDE model can be applied to IoT deployments. Document the threats Rate the threats: based on the likehood and impact of each threat. You can use DREAD (Damage Reproducibility Exploitability Affected_users Discoverability) and give score 1-10 for each threat. ","date":"2022/09/18","image":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/iot-security-2/IoTSec.jpg","permalink":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/iot-security-2/","summary":"Pillar of Information Security Five pillars of cybersecurtiy:\nConfidentiality Integrity Availability Authentication Non-repudiation Plus two more in IoT\nResilience: maintain state of awareness and an accepted level of operational normalcy in response to disturbances including from the nature. Safety: safe from causing hurt, injury, or loss. TVR (Threat Vulnerability Risk) Threat: potential of attacks/exploit. Threat actor (source): who do the threat. Threat: hardware, software, environmental, supply chain, degradation, etc. Can target safety: transfer functions, state filters (kalman filters) and other inner control loop artifacts.","title":"IoT Security 2 - Vulnerability Threat and Countermeasures"},{"content":"Introduction to Course www.awsacademy.com\nDefinisi Layanan komputasi yang diletakkan di internet.\nSAAS = Software as a Services, Software yang diletakkan diinternet. DIbayarkan per-orang atau per-kapasitas : (sperti sewa hotel)\nOffice 365 Instagram Meta Email PAAS = Platform as A Services (seperti sewa rumah). Di tagih berdasarkan konsumsi: berapa banyak dipakai.\nCloud Storage Elastic Benastalk IAAS = Infrastructure as A Services (seperti sewa tanah), jargon Lift and Save\nVM (Virtual Machine) On-premise (SHM) adalah punya server sendiri.\nMengubah dari kapex(kapital -\u0026gt; kepemilikan) ke opex (operasional)\nCloud dibuat dari 2 teknologi berikut:\nVirtualisasi = Memvirtualkan hardware menjadi software. Dalam satu host OS ada beberapa OS yang berjalan. Distributed Computing = Kumpulan virtualisasi yang diterapkan pada lingkungan terdistribusi (bagi-bagi penderitaan). Sizing: aktivitas untuk mendefinisikan kebutuhan cloud computing terhadap sebuah masalah.\nContoh via pricing calculator. Teknologi anda modern pilih PAAS Teknologi anda jadul pilih IAAS\nBuku blitz scale\nKonsep clustering, active passive clustering = layanan high availability jika ada server yang mati, maka akan ada server lain yang menggantikan, atleast 30 km dari lokasi.\nScalability sangat relevant dengan automating.\nScale up (vertical scalability) Menambah kapasitas dan kemampuan mesin (bisa diautomasi) atau upscaling. Scale down (horizontal scalability) Menambah mesin untuk melayani penggunaan (bisa diautomasi, misal ketika penggunaan sudah di atas berapa persen) Mendukung high availability Scalability bisa didasarkan pada satu metric.\nCaching menawarkan alokasi ruang agar semakin dekat.\nDecoupling\nRoles in Cloud Computing IT Professional Generalist Automation and Deployment Script IT Leader (IT Manager, IT Director, IT Supervisor) Day to Day operation Budgeting Managerial Stay informed about new technologies Hands on during early stages of a project then delegates the team to take over Developer Menuliskan code Memikirkan projek pada application leve DevOps Engineer Menyiapkan infrastruktur Automasi Infrastruktur (CI/CD) Cloud Architect Mengadopsi teknologi baru Membuat dokumentasi, proses, dan tools kepada developer Resource management Cost optimization Bekerjasama dengan developer dan membiarkan developer untuk berinovasi Defining best practices for performance, reliability, and security Requirements untuk Dapat Badge Selesaikan guide lab Selesaikan challenge lab Selesaikan knowledge Check Selesaikan capstone project Sertifikasi Cloud Architect Associate (ujian 90 menit)\n","date":"2022/09/16","image":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/cloud-1/cloud.jpg","permalink":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/cloud-1/","summary":"Introduction to Course www.awsacademy.com\nDefinisi Layanan komputasi yang diletakkan di internet.\nSAAS = Software as a Services, Software yang diletakkan diinternet. DIbayarkan per-orang atau per-kapasitas : (sperti sewa hotel)\nOffice 365 Instagram Meta Email PAAS = Platform as A Services (seperti sewa rumah). Di tagih berdasarkan konsumsi: berapa banyak dipakai.\nCloud Storage Elastic Benastalk IAAS = Infrastructure as A Services (seperti sewa tanah), jargon Lift and Save\nVM (Virtual Machine) On-premise (SHM) adalah punya server sendiri.","title":"Cloud 1 - Introduction"},{"content":"Well-Architected Framework .\nA guide that is designed to help you build the most secure, high-performing, resilient, and efficient infrastructure possible for your cloud applications and workloads.\nSecurity: the ability to protect information, systems, and assets while delivering business value through risk assessments and mitigation strategies. The implementation: strong identity foundation, enable traceability, security at all layers, automate security best practices,and protect data in transit and at rest.\nOperational Excellence: the ability to run systems and gain insight into their operations to deliver business value. It also addresses the ability to continuously improve supporting processes and procedures.\nAware how it will be deployed, updated, and operated. Implementing engineering practices to reduce defect and do quick safe fixes. Enable observation through logging, instrumentation, and business technical metrics. Reliability: the ability of a system to recover from infrastructure or service disruptions and dynamically acquire computing resources to meet demand. It also addresses the ability of a system to mitigate disruptions such as misconfigurations or transient network issues.\nPerformance Efficiency: o maximize your performance by using computation resources efficiently. You also want to maintain that efficiency as the demand changes.\nConsider using a vendor to any technology that difficult to implement yourself. Mechanical sympathy: use a tool or system with an understanding of how it operates best. Use the technology approach that aligns best to what you are trying to achieve. i.e. consider data access patterns when you select database or storage approaches. Cost Optimization: ongoing requirement of any good architectural design. The process is iterative, and it should be refined and improved throughout your production lifetime.\nMeasure efficiency Eliminate unneeded expense Consider using managed services Best Practices for Building Solution Design tradeoffs:\nTrade consistency, durability, and space for time and latency to deliver higher performance, prioritize speed to market of new features over cost. Benchmarking to achieve cost-optimal workload. Must be based on design decisions on empiricaal data. Scalability: ensure that your architecture can handle changes in demand.\nBad design (anti-pattern): Administrator manually launches new server after users can not access application. EC2 Auto Scaling react based on alarm after EC2 reach its threshold, so new server is ready before capacity is reached. For monitoring solution there is Amazon CloudWatch. Example usage: the threshold is when CPU utilization stayed above 60% for longer than 5 minutes. When alarm is triggered, Amazon EC2 Auto Scaling immediately launches a new instance. You should also design system to scale in when demand drops off. Automate: where is possible, automate the provisioning, termination, and configuration of resources.\nAnti-pattern: When application server crashes, users manually notify administrator and administrator manually launches and configures new server. When application server crashes, Amazon CloudWatch can automatically detect it, notifies administrator. Amazon EC2 Auto Scaling can automatically launches and configures identical server. It can also automatically logs action to a change management solution. Treat resources as disposable: taking advantage of provisioned nature of cloud computing.\nThinking infrastructure as software instead of hardware (flexible and easier to upgrade) Think that it is easy to migrate between instances or other resources, so you can quickly respond to changes. Automate deployment of new resources with identical configurations. Terminate resources that are not in use. Switch to new IP addresses automatically. Test updates on new resources and then replace old resources with update ones. Use loosely coupled components: Architecture with independent components. Traditional infrastructures have chains of tightly integrated servers, each with a specific purposes. Hoewver, if one of the layers goes down, it affects many other systems.\nThe example is the usage of load balancer that routes requests between the web servers and the application servers. If one of the application server goes down, the load balancer will automatically directing all traffic to healthy servers. Message queues is asynchronous service-to-service communication used in serverless architectures. It provides communication and coordination of distributed application. Design services not servers\nConsiduer using containers or serverless solution Message queues handle communication between applications Static web assets are stored externally, such as on Amazon S3 User authentication and user state storage are handled by managed AWS services. Choose the right database solution. Traditional data centers and on-premises environments limits on available hardware and licences. It can constrains your choices of a data store solution. Consider these things:\nRead and write needs Total storage requirements Typical object size and nature of access of these objects Durability requirements Latency requirements Maximum concurrent users to support Nature of queries Required strength of integrity controls. Avoid single points of failure, where possible use redundancy to prevent single points from bringing down an entire system. Assume everything fails, then design backward.\nCreate a secondary standby database server and replicate the data. Optimize for cost, cloud allows to trade capital expense for variable expense. Capital expense (capex) are funds that a company uses to acquire, upgrade, and maintain physical assets such as property, industrial buildings, or equipment. Variable expense is a cost model. You can pay only for the individual services you need and as long as you use them.\nUse caching, cache can make the response goes faster and reduce network throughput by temporarily store data in an intermediary location. Cloudfront stores a copy of a file at an edge location close to the user, and sends a copy to the user who made the request. This technique reduces latency and S3 usage cost. Secure your entire infrastructure, it isn\u0026rsquo;t only about getting through the outer boundary of your infrastructure. It also involves individual environments and their components are secured from each other.\nIsolate parts of your infrastructure Create security groups to determine who can send and receive traffic. The security group can reduce probability a security threat on one instance can spread to every other instance in the environment. Encrypt data in transit and at rest. Enforce access control granularly using principle of least privilege Use multi-factor authentication (MFA) Use managed services Log access of resources Automate your deployment to keep security consistent. AWS Global Infrastructure Regions AWS cloud infrastructure is built around Regions. AWS has 22 region world wide. An AWS Region is a physical geographical location with two or more Availability Zones.\nCommunication between regions uses AWS backbone network infrastructure. Some of AWS regions are disabled by default. You must enable these Regions before you can use them. To achieve fault tolerance and stability, Regions are isolated from one another.\nAvailability Zone Each AWS Region consists of two or more isolated locations that are known as Availability Zones. Each Availability Zone comprises one or more data centers and designed as an independent failure zone. One Availability Zones may have as many as six data centers, however no data center can be a part of two Availability Zones.\nDistributing applications across multiple Availability Zones enables them to remain resilient in most failure situations, including natural disasters or system failures.\nLocal Zones AWS Local Zone location is an extension of an AWS Region. It is a new type of AWS infrastructure deployment that place AWS services closer to large population. With Local Zones, you can run latency-sensitive portions of applications closer to end users. Local Zones beneficial to low-latency use cases, for example media and entertainment, real-time gaming, reservoir simulation, electronic design automation, and machine learning.\nData Centers Location where data resides and processing happen. You do not specify a data center for the deployment of resources. It is the location where the actual data resides. All data centers configured to move customer data traffic away in case of failures.\nAWS Points of Presence To deliver content to end user with lower latency, Amazon CloudFront uses a global network over 200 points of presences that are comprised of Edge Locations and Regional Edge Caches.\nEdge locations are located in NA, EU, Asia, Australia, South America, Middle East, Africa, and China. Edge locations support AWS services like Amazon Route 53 and Amazon CloudFront.\nRegional edge caches are used by default with Amazon CloudFront. They are used when you have content that is not accessed requently enough to remain in an edge location. Regional edge caches absorb this content and provide an alternative to fetching the content from he origin server.\nReferences https://d1.awsstatic.com/whitepapers/architecture/AWS_Well-Architected_Framework.pdf Security Pillar Whitepaper Operational Excellence Pillar https://d1.awsstatic.com/whitepapers/architecture/AWS-Reliability-Pillar.pdf https://d1.awsstatic.com/whitepapers/architecture/AWS-Performance-Efficiency-Pillar.pdf https://aws.amazon.com/message-queue/ https://aws.amazon.com/cloudfront/features/?whats-new-cloudfront.sort-by=item.additionalFields.postDateTime\u0026amp;whats-new-cloudfront.sort-order=desc#Amazon_CloudFront_Infrastructure ","date":"2022/09/16","image":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/cloud-2/cloud.jpg","permalink":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/cloud-2/","summary":"Well-Architected Framework .\nA guide that is designed to help you build the most secure, high-performing, resilient, and efficient infrastructure possible for your cloud applications and workloads.\nSecurity: the ability to protect information, systems, and assets while delivering business value through risk assessments and mitigation strategies. The implementation: strong identity foundation, enable traceability, security at all layers, automate security best practices,and protect data in transit and at rest.\nOperational Excellence: the ability to run systems and gain insight into their operations to deliver business value.","title":"Cloud 2 - Introducing Cloud Architecture"},{"content":"Definition of IoT Based on IEEE, IoT is a network that connects uniquely identifiable “things” to the Internet. The “things” have sensing/actuation and potential programmability capabilities.\nBased on ITU-T Y.2060 A device is a piece of equipment with the mandatory capabilities of communication and the optional capabilities of sensing, actuation, data capture, data storage, and data processing. Thing is an object of the physical world (physical things) or the information world (virtual things), which is capable of being identified and integrated into communication networks.\nThe Implementation of IoT Today, many industries rely on IoT to implement these technologies:\nSmart Grid to support more efficient, resilient, and more supportive of environmentally responsible living. Connected vehicle, leveraging onboard sensors to scan the roadway and make real-time calculations related to driver’s safety. Also enable capability to do vehicle-to-vehicle (V2V) communication capabilities. Manufacturing, by connecting myriad sensors and actuators to support manufacturing operation. Wearables, things that are strapped or attached to the human body to collect and communicate information. Implantables and medical devices, sensor, controller or communication device that is inserted and operated within the human body. The Need of IoT Security and Safety IoT security is different from traditional cybersecurity as it is a product that comes from other engineering disciplines. IoT security includes direct or distributed monitoring and control of the state of physical systems connected to the internet. Security for the IoT has to ensure not only basic information security factors (confidentiality, integrity, non-repudiation), but also the “physical element” of the devices.\nThere are four cyber-physical aspects of the IoT face a safety versus security:\nEveryone is responsible for security The IoT and CPS expose huge security problems by crossing information computing and the physical world Traditional core engineering disciplines more often do not consider security. Many security engineers are ignorant of core engineering disciplines, including fault-tolerant safety design. Based on a great statement by Dr. Barry Boehm:\nSafety is related about how the system must not harm the world Security is related about how the world must not harm the system These are examples of threat contained in the IoT\nAttackers can pivot the attack from IoT devices into the network, and even onto other industries. Without proper authentication, malicious hackers can tamper thermodynamics sensors to provide falsified information and harm the workers. In the absence of a compatible framework for the IoT security, NIST formed CPS Public Working Group represents a cross-industry collaboration of security professionals working to build a framework approach to solve many cyber-physical IoT challenges. This framework provides helpful references to tackle security and physical properties of IoT. It can also help professionals to build system-specific security standards for different implementations.\nThe CPS and The IoT Cyber-Physical Systems have some overlapping definitions with the IoT. CPS consists of connected sensors, actuators, with adequate monitoring and controlling systems. However it does not necessarily have to be connected to the internet.\nEven though CPS is technically air-gapped from the internet, it may be connected to the internet one way or another. CPS still needs to be maintained, monitored, and patched. It connects to the internet by using indirect connections, for example supply chain, operating personnel, or out-of-band patch management system.\nCPS is generally designed for safety, security, and functionality. It, however, can be enveloped into IoT simply by connecting it to the internet. So, the intrinsic capability of IoT is its ability to communicate to the internet.\nDevice Lifecycle The IoT device lifecycle divided into 3 phases\nIoT Device Implementation, aspect of IoT device design and development. The organization included in this phase are:\nOriginal Equipment Manufacturer (OEM) - procure customized hardware and firmware and tailor a device with unique physical characteristics. OEMs also package and distribute products to end operators. Board Support Package (BSP) - Typically provides the OEM customized firmware, APIs, and drivers between the hardware and OS. Original Design Manufacturers (ODM) - providing OS and hardware sub-assemblies. IoT Service Implementation, aspect to support IoT deployments through enterprise APIs, gateways, and other architectural commodities.\nCloud Service Provider (CSP) : public cloud that at minimum provided IAAS. OEMs : the IoT manufacturers that operate and manage their own infrastructure. IoT Device and Service Deployment, the end of deployment phase of IoT devices in the IoT infrastructure.\nHardware and Operating System There are many IoT development boards, such as Arduino and Raspberry Pi, those are popular for prototyping and provide various levels of functionality. Some IoT devices utilize Real Time Operating System (RTOS) for process and memory management as well as including message and communication services.\nIoT Communications In most of the cases, an IoT device communicates through the gateway to reach the controller or a web service. The example can be as simple as a smartphone, acting as a gateway, colocated with the IoT endpoint and communicating over an RF protocol, such as Bluetooth-LE, ZigBee, or Wi-Fi. Others may be more centrally located in data centres using proprietary gateway IoT protocols, such as Message Queuing Telemetry Transport (MQTT) or Representational State Transfer (REST). A wide array of protocols may be used to enable message transfer and communication.\nIt is worth noting that industry regulations are applicable to IoT devices, such as HIPAA, PCI, SOX, and others.\nMessaging Protocols These formats are\nMessage Queuing Telemetry Transport (MQTT) Publish/subscribe model whereby clients subscribe to topics and maintain an always-on TCP connection to broker server. If new messages are sent to the broker, they include a topic with the message, allowing the broker to determine which clients should receive the message. Constrained Application Protocol (CoAP) CoAP devices communicate to web servers using specific URI to process commands. This messaging protocol are UDP-based to call HTTP request method using resource-constrained devices,such as WSN.\nData Distribution Service (DDS) Just like MQTT, it also uses a publish/subscribe model. DDS allows communications to happen anonymously and automatically, since no relationship between the endpoints are required. QoS mechanisms are built into the protocol. DDS is designed for device-to-device communication and is used in deployment scenarios, such as wind farms, medical imaging systems, and asset-tracking systems.\nAdvanced Message Queuing Protocol (AMQP) Designed to provide a queuing system in support of server-to-server communications. AMQP allows both publish/subscribe and point-to-point communication models.\nExtensible Messaging and Presence Protocol (XMPP) Spports the transmission of XML messages over TCP, allowing developers to implement service discovery and service advertisements.\nGateways Most of the message specifications above require protocol-specific gateways or other devices to re-encapsulate the communication over another protocol or perform protocol translation. This manipulating protocols can have enormous security implications or introducing new attack surfaces into an enterprise.\nTransport, Network, Data Link and Physical Protocols Transport Protocols Transmission Control Protocol (TCP) facilitates acknowledgement of TCP segment transmitted across a network. Full TCP/IP stack that can speak HTTP or MQTT over a secure (TLS) connection. However, TCP is frequently unsuitable for use in constrained network environments (high latency or limited bandwidth).\nOn the other hand, User Datagram Protocol (UDP) acts as an alternative to TCP. UDP provides a lightweight transport protocol for connectionless communications. Many highly constrained IoT sensor devices support UDP. For the security reason, there is an alternative to TLS design called Datagram TLS (DTLS) intended for products that implement UDP-based transport.\nNetwork Protocols IPv4 and IPv6 both play a role in communication in IoT infrastructure. IPv6 over Low Power Wireless Personal Area Network (6LoWPAN) supports use of IPv6 within network-constrained environments. It supports lower data rates of internet connectivity. Designers can also take advantage of link encryption offered within IEEE 802.15.4.\nData Link and Physical Protocols IEEE 802.15.4 is designed to operate using p2p or star topologies for low-power and low-speed environments. It supports data rates up to 205kb/s. The PHY layer is responsible for managing RF network access, while the MAC layer is responsible for managing transmission and receipt of frames onto the data link. ZWave supports unicast, multicast, and broadcast. ZWave operates at 908.42 MHz (NA) and 868.42 MHz (Europe) with data rates of 100kb/s over a range of about 30 metres. Bluetooth Low Energy (BLE) designed for enhanced battery life operates in 2.4 GHz frequency range. It also supports high-rate frequency hopping spread spectrum and AES encryption. Power Line COmmunication (PLC) - communications that are modulated directly over existing power lines. Cellular communications is boosted by moving towards 5G communications allowing new centralised controller functions to be created that support multitudes of geographically dispersed sensors/actuators with limited infrastructure in place. ","date":"2022/09/14","image":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/iot-security-1/IoTSec.jpg","permalink":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/iot-security-1/","summary":"Definition of IoT Based on IEEE, IoT is a network that connects uniquely identifiable “things” to the Internet. The “things” have sensing/actuation and potential programmability capabilities.\nBased on ITU-T Y.2060 A device is a piece of equipment with the mandatory capabilities of communication and the optional capabilities of sensing, actuation, data capture, data storage, and data processing. Thing is an object of the physical world (physical things) or the information world (virtual things), which is capable of being identified and integrated into communication networks.","title":"IoT Security 1 - A Brave New World"},{"content":"Hello World Hi, im here\n","date":"2022/09/01","image":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/firstpost/test.jpg","permalink":"https://devismail2y.github.io/notashoppingnote/new-notashoppingnote/firstpost/","summary":"Hello World Hi, im here","title":"Template"}]